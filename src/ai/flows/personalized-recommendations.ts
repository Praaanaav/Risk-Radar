// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview A flow to generate personalized recommendations for patients based on their risk factors.
 *
 * - generatePersonalizedRecommendations - A function that generates personalized recommendations for patients.
 * - PersonalizedRecommendationsInput - The input type for the generatePersonalizedRecommendations function.
 * - PersonalizedRecommendationsOutput - The return type for the generatePersonalizedRecommendations function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const PersonalizedRecommendationsInputSchema = z.object({
  patientDataSummary: z.string().describe('A plain English summary of the patient data and key risk factors.'),
  riskLevel: z.enum(['High', 'Low']).describe('The overall risk level for the patient.'),
  isEmergency: z.boolean().describe('Whether the patient is in an emergency situation.'),
});
export type PersonalizedRecommendationsInput = z.infer<typeof PersonalizedRecommendationsInputSchema>;

const PersonalizedRecommendationsOutputSchema = z.object({
  recommendations: z
    .string()
    .describe(
      'Personalized recommendations for the patient to reduce their risk of readmission, formatted as markdown. Critical advice that are things to do should be marked with [DO] and things to avoid with [DON\'T]. For example: "[DO]Take your medication as prescribed." or "[DON\'T]Skip your follow-up appointments."'
    ),
  futureRisks: z
    .string()
    .describe(
      'A brief summary of potential future health risks or diseases the patient might face if the current condition is not managed properly.'
    ),
  emergencyPlan: z
    .string()
    .optional()
    .describe(
      'If the situation is an emergency, provide a clear, step-by-step emergency action plan. For example, for "no breathing", advise calling 911 and starting CPR. For "bleeding", advise applying pressure.'
    ),
});
export type PersonalizedRecommendationsOutput = z.infer<typeof PersonalizedRecommendationsOutputSchema>;

export async function generatePersonalizedRecommendations(
  input: PersonalizedRecommendationsInput
): Promise<PersonalizedRecommendationsOutput> {
  return personalizedRecommendationsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'personalizedRecommendationsPrompt',
  input: {schema: PersonalizedRecommendationsInputSchema},
  output: {schema: PersonalizedRecommendationsOutputSchema},
  prompt: `You are an expert healthcare advisor. Based on the patient's situation, give simple, clear advice to help them avoid another hospital visit. Also, explain what future health problems could happen if they don't take care. Write in simple English.

Use "[DO]" for things the patient **should do**.
Use "[DON'T]" for things the patient **should not do**.

{{#if isEmergency}}
This is an emergency. Create an "emergencyPlan" with simple, life-saving steps.
- For "bleeding", say to press on the wound.
- For "amputation", say to call for an ambulance immediately.
- For "no breathing" or "no pulse", say to call for an ambulance and start CPR.
{{/if}}

Patient Information Summary: {{{patientDataSummary}}}
Risk Level: {{{riskLevel}}}

Advice:`,
});

const personalizedRecommendationsFlow = ai.defineFlow(
  {
    name: 'personalizedRecommendationsFlow',
    inputSchema: PersonalizedRecommendationsInputSchema,
    outputSchema: PersonalizedRecommendationsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
